spring.application.name=job-service
server.port=8082
#spring.h2.console.enabled=true
#spring.database.url=jdbc:h2:mem:test
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
##spring.h2.console.settings.web-allow-others=true


###PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/job
#spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=postgres
spring.datasource.password=QRAXTm109!
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


#Eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


#Zipkin
management.tracing.sampling.probability=1.0

#Config Server
spring.config.import=optional:configserver:http://localhost:8080

#for different profile do
spring.profiles.active=default

#Resilience4J
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count-based

#Retry module 
resilience4j.retry.instances.companyBreaker.max-attempts=5
resilience4j.retry.instances.companyBreaker.waitDuration=2s

#RateLimiter
resilience4j.ratelimiter.instances.companyBreaker.timeout-duration=0
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-period=4s
resilience4j.ratelimiter.instances.companyBreaker.limit-for-period=2
#the ratelimiter will allow 2 calls for every 4 seconds for us if more calls are made they will be immediately rejected without waiting because timeout-duration=0 if we keep timeout-duration=5 it means if more calls are made  within this period, they wont be immediately rejected and they will be made to wait for that particular duration


#Actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always